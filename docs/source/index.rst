.. FRion documentation master file, created by
   sphinx-quickstart on Fri Apr 16 15:03:12 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. _homepage:

Welcome to FRion's documentation!
=================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:
   :hidden:

   predict
   correct

FRion is a Python3 package for the prediction and correction of ionospheric
Faraday rotation, which can be useful in certain radio astronomy applications.
FRion focuses on time-averaged effects of the ionosphere, for cases where data
gets time-averaged before an ionospheric correction can be applied, but also
has functions to produce time-series of the ionospheric Faraday rotation.

This package uses `RMextract <https://github.com/lofar-astron/RMextract/>`_ 
for the underlying ionospheric calculations. Users interested in alternative
ionospheric Faraday rotation packages can look at
`ionFR <https://github.com/csobey/ionFR>`_,
or `ALBUS <https://github.com/twillis449/ALBUS_ionosphere>`_.

A mathematical derivation of how the time-independent ionospheric Faraday 
rotation correction is defined, along with some remarks on its use, 
can be found :download:`here <./Ionospheric_Correction.pdf>`.

The package consists of two parts:

* :ref:`predict`: Functions for predicting the ionospheric Faraday rotation and computing the time-average.
* :ref:`correct`: Functions for correcting Stokes Q and U data cubes for the effects of ionospheric Faraday rotation.

Each part can be imported into Python scripts, or the basic functionality can
be accessed through the following terminal commands:

- ``frion_predict`` 
    Runs the time-averaged prediction script, given user-supplied observation 
    time, location, direction, and frequencies. Can read this information from 
    a FITS header.
- ``frion_correct`` 
    Runs the correction script, applying a correction (generated by the predict 
    functions) to a pair of Stokes Q and U cubes to removed the predicted 
    ionospheric modulation and depolarization.

Use the ``-h`` flag to get detailed usage instructions for each.




Installation
------------

FRion will be released on PyPi once it is complete and tested, which will
enable easy installation through pip.

In the mean time, it can be installed by downloading the code from 
`this link <https://github.com/Cameron-Van-Eck/FRion/archive/refs/heads/main.zip>`_, 
unzipping, moving the code directory somewhere convenient, 
going into the code directory, then running ``pip install -e .``.
This will install the package to the Python packages directory.

RMextract must be installed seperately it. It is now available through pip, 
using ``pip install RMextract``, but this will try to install casacore as a dependency. 
casacore can be difficult to install on some systems, so if this causes a problem
you can install it without casacore by using ``pip install --no-deps RMextract``.
casacore is not required: if casacore is not installed, RMextract will use the ephem package instead, which installs
automatically with FRion.


It should then
be importable using the statements ``import FRion.predict as predict`` and
``import FRion.correct as correct``, or runable on the terminal with the commands
``frion_predict``, ``frion_timeseries``, and ``frion_correct``.





Usage
------------
To generate ionospheric Faraday rotation predictions as a function of time, 
the user can use the predict timeseries functions. These can be used from
the command line using ``frion_timeseries``. This requires the user to supply the
start and end times of the observation, the location of the telescope, and the 
sky coordinates. These values can be supplied from a FITS or PSRFITS file if
the correct keywords are in the file's header. The user can choose to save the
values to a file and/or generate a plot.

These features can be accessed in a Python script using the functions 
available in the :ref:`predict` module, starting with :py:func:`FRion.predict.get_RM()`.

Generating time-averaged predictions can be done similarly from the command line
using the ``frion_predict`` command or the functions in the :ref:`predict` module.
These predictions require the same information, plus the frequencies of each 
channel.

Warnings about reduced accuracy when using PyEphem can be safely ignored 
(accuracy is approximately 1 arcsecond, and ionospheric data is so coarse
that this has no effect on results).

Stokes Q and U FITS cubes can be corrected for the time-averaged Faraday rotation,
using the :ref:`correct` module. Tools for time-dependent corrections to 
different data types (pulsar observation, visibilities, etc) are outside the 
scope of this package.

The correction functions can be used from the command line using ``frion_correct``,
or within a script using :py:func:`FRion.correct.apply_correction_to_files()`.
The correction relies on the predictions generated by the predict module, so
the user must run the predict tools first and save the ionospheric modulation 
to a text file; this text file is used as an input by the correct tools.

Note that the correct tools will create a new pair of Stokes Q and U FITS cubes,
with the same size as the input cubes. The user must ensure that sufficient disk
space is available, otherwise this step will fail.

The default correct functions require holding the full Q and U cubes in RAM
while processing, which may overflow some systems (requiring the use of much 
slower virtual memory). A large-file version has also been developed to
reduce this memory footprint, and can be enabled in the command-line tool by
setting the ``-L`` flag or in scripts by using the 
:py:func:`FRion.correct.apply_correction_large_cube()` function.
 








Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
